open import ToddPrelude
open import CantorNumbers

postulate ‚Ñù : Set
postulate ‚Ñù‚ÇÄ : ‚Ñù
postulate _<‚Ñù_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ùîπ
postulate _=‚Ñù_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ùîπ
postulate ‚Ñù‚ÇÄ-bottom : (r : ‚Ñù) ‚Üí (‚Ñù‚ÇÄ =‚Ñù r) ‚â° ff ‚Üí (‚Ñù‚ÇÄ <‚Ñù r) ‚â° tt
postulate Œ¶ : {A : Set} ‚Üí A ‚Üí A ‚Üí ‚Ñù

record Hausdorff (S : Set) : Set where 
  field
    _‚â†_ : S ‚Üí S ‚Üí ùîπ
    irr : ‚àÄ x ‚Üí (x ‚â† x) ‚â° ff
    sym : ‚àÄ x y ‚Üí (x ‚â† y) ‚â° tt ‚Üí (y ‚â† x) ‚â° tt
    com : ‚àÄ x y z ‚Üí (x ‚â† z) ‚â° tt ‚Üí ((x ‚â† y) ‚â° tt) ‚à® ((y ‚â† z) ‚â° tt)
    Œ© : S ‚Üí S ‚Üí S
    def1 : ‚àÄ x y ‚Üí (x ‚â† y) ‚â° tt ‚Üí ‚àÉ (Œª Œµ ‚Üí (Œµ <‚Ñù Œ¶ x y) ‚â° tt)
    def2 : ‚àÄ x y ‚Üí (x ‚â† y) ‚â° tt ‚Üí ‚àÉ (Œª s ‚Üí (Œ© x y ‚â° s) ‚àß (((x ‚â† s) ‚â° tt) ‚àß ((y ‚â† s) ‚â° tt)))

postulate Œ¶‚ÇÄ : {A : Set} ‚Üí (x : A) ‚Üí (‚Ñù‚ÇÄ =‚Ñù (Œ¶ x x)) ‚â° tt
postulate Œ¶‚ÇÅ : {A : Set} ‚Üí (x y : A) ‚Üí (‚Ñù‚ÇÄ =‚Ñù (Œ¶ x y)) ‚â° tt ‚Üí x ‚â° y
postulate Œ¶‚ÇÇ : {A : Set} ‚Üí (y‚ÇÅ y‚ÇÇ : A) ‚Üí  ((‚Ñù‚ÇÄ <‚Ñù (Œ¶ y‚ÇÅ y‚ÇÇ)) ‚â° tt) ‚à® ((‚Ñù‚ÇÄ =‚Ñù (Œ¶ y‚ÇÅ y‚ÇÇ)) ‚â° tt)
postulate fact : {A : Set} (S : Hausdorff A) ‚Üí (x y : A) ‚Üí (x ‚â° y) ‚Üí (Hausdorff._‚â†_ S x y) ‚â° ff

lemma : {A : Set} (S : Hausdorff A) ‚Üí (x y : A) ‚Üí (Hausdorff._‚â†_ S x y) ‚â° tt ‚Üí (‚Ñù‚ÇÄ =‚Ñù Œ¶ x y) ‚â° ff  
lemma S x y x‚ÇÅ = ‚à®-elim (ùîπLEM (‚Ñù‚ÇÄ =‚Ñù Œ¶ x y)) (Œª z ‚Üí EFQ x‚ÇÅ (fact S x y (Œ¶‚ÇÅ x y z))) (Œª z ‚Üí z)

‚ÑïH : Hausdorff ‚Ñï
Hausdorff._‚â†_ ‚ÑïH = Œª x y ‚Üí ! (x =‚Ñï y)
Hausdorff.irr ‚ÑïH x = cong‚â° (Œª ‚ñ† ‚Üí ! ‚ñ†) (op x) where
  op : ‚àÄ x ‚Üí (x =‚Ñï x) ‚â° tt
  op zero = refl
  op (succ x) = op x
Hausdorff.sym ‚ÑïH x y pr = trans‚â° (cong‚â° (Œª ‚ñ† ‚Üí ! ‚ñ†) (op y x)) pr where
  op : ‚àÄ x y ‚Üí (x =‚Ñï y) ‚â° (y =‚Ñï x)
  op zero zero = refl
  op zero (succ _) = refl
  op (succ _) zero = refl
  op (succ x) (succ y) = op x y
Hausdorff.com ‚ÑïH x y z pr = ‚à®-elim (ùîπLEM (Hausdorff._‚â†_ ‚ÑïH x y)) inl
                                              (Œª pr‚ÇÅ ‚Üí ‚à®-elim (ùîπLEM (Hausdorff._‚â†_ ‚ÑïH y z)) inr
                                              (Œª pr‚ÇÇ ‚Üí EFQ pr (cong‚â° (Œª ‚ñ† ‚Üí ! ‚ñ†)
                                              (rule x y z (rule2 (x =‚Ñï y) pr‚ÇÅ) (rule2 (y =‚Ñï z) pr‚ÇÇ))))) where
  rule2 : ‚àÄ b ‚Üí (! b) ‚â° ff ‚Üí b ‚â° tt
  rule2 ff ()
  rule2 tt refl = refl
  rule : ‚àÄ x y z ‚Üí (x =‚Ñï y) ‚â° tt ‚Üí (y =‚Ñï z) ‚â° tt ‚Üí (x =‚Ñï z) ‚â° tt
  rule zero zero _ _ x‚ÇÉ = x‚ÇÉ
  rule zero (succ _) _ () _
  rule (succ _) zero _ () _
  rule _ (succ _) zero _ ()
  rule (succ x) (succ y) (succ z) x‚ÇÇ x‚ÇÉ = rule x y z x‚ÇÇ x‚ÇÉ
Hausdorff.Œ© ‚ÑïH x y = Œ¶‚Ñï x y where
  Œ¶‚Ñï : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
  Œ¶‚Ñï n m = max‚Ñï (n ‚àí‚Ñï m) (m ‚àí‚Ñï n)
Hausdorff.def1 ‚ÑïH x y pr = ‚Ñù‚ÇÄ ‚áí (‚Ñù‚ÇÄ-bottom (Œ¶ x y) (lemma {!!} x y pr))
Hausdorff.def2 ‚ÑïH x y x‚ÇÅ = {!!}

postulate fact2 : ‚àÄ x ‚Üí (head x =ùïì head x) ‚â° tt

‚ÑÇH : ‚Ñï ‚Üí Hausdorff ‚ÑÇ
Hausdorff._‚â†_ (‚ÑÇH n) = Œª x y ‚Üí ! (x =‚ÑÇ y) n
Hausdorff.irr (‚ÑÇH n) x = cong‚â° (Œª ‚ñ† ‚Üí ! ‚ñ†) (op x n) where
  op : ‚àÄ x n ‚Üí (x =‚ÑÇ x) n ‚â° tt
  op x zero = fact2 x
  op x (succ n) = trans‚â° (cong‚â° (Œª ‚ñ† ‚Üí (if ‚ñ† then (tail x =‚ÑÇ tail x) n else ff)) (fact2 x)) (op (tail x) n)
Hausdorff.sym (‚ÑÇH n) x y pr = {!!}
Hausdorff.com (‚ÑÇH n) x y z pr = {!!}
Hausdorff.Œ© (‚ÑÇH n) = {!!}
Hausdorff.def1 (‚ÑÇH n) = {!!}
Hausdorff.def2 (‚ÑÇH n) = {!!}
